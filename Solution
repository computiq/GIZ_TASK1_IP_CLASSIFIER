class Solution(object):
    def __init__(self, a= ''):
        self.b=len(a.split("."))
        self.c=a.split(".")
        self.workingIP = [0, 0, 0, 0]
        self.inip=a.isalpha()
        self.ipmask=a.split('/')
        self.splitMask=int(self.ipmask[1])

        for index in range(self.b):
            if self.workingIP[index] > 255: raise ValueError 
    
        if self.splitMask> 32 or self.splitMask < 0: print("this is not a vaild subnetmask!")
        else:

        #---------------------- IP validity -----------
            if not self.inip and self.b==4 and "/" in a :
            
                self.Designation(a)
            else:
                print("you should inter a vaild IP with supnet mask ex: x.x.x.x/x !")



    #---------------------------- chek the class and  Designation of the IP -------
    def Designation(self,validIp):
        self.des=''
        self.cls=''
        self.c=validIp.split(".")
        self.intip=int(self.c[0])
            
            
    
        if self.intip == 127 :
            self.des=' spacial'
       
        # ------ class A --------
        else:
            if self.intip >= 1 and self.intip < 127 :
                if self.intip == 10 :
                    self.des='Private'
                else:
                    self.cls='A'
                    self.des='public'
        # ------ class B --------         
            elif self.intip > 127 and self.intip <192 :

                if self.intip == 172 and int(self.c[1]) >= 16 and int(self.c[1]) <= 31:
                    self.des='Private'
                else:
                    self.cls='B'
                    self.des='public'
        # ------ class C --------
            elif self.intip>=192 and self.intip<223 :
                
                if self.intip== 192 and int(self.c[1]) == 168 :
                        self.des='Private'
                else:
                    self.cls='C'
                    self.des='public'
        # ------ class D --------
            elif self.intip>=224 and self.intip<239 :
                self.cls= 'D'
                self.des='spacial'
        # ------ class E --------
            else:
                self.cls= 'E'
                self.des='spacial'

        print("class is : "+self.cls + " \n Designation:" +self.des)
        
        

if __name__ == '__main__':
    inputip=input("enter your ip")
    p1=Solution(a=inputip) 
    print(p1)
